from sqlalchemy.engine import defaultclass ParadoxExecutionContext(default.DefaultExecutionContext):    def create_server_side_cursor(self):        super(ParadoxExecutionContext, self).create_server_side_cursor()    def result(self):        return super(ParadoxExecutionContext, self).result()    def get_rowcount(self):        return super(ParadoxExecutionContext, self).get_rowcount()class ParadoxDialect(default.DefaultDialect):    name = "paradox"    def _check_unicode_returns(self, connection, additional_tests=None):        # The driver should pretty much always be running on a modern        # Windows system, so it's more or less safe to assume we'll        # always get a unicode string back for string values        return True    def get_columns(self, connection, table_name, schema=None, **kw):        return super(ParadoxDialect, self).get_columns(connection, table_name, schema, **kw)    def get_primary_keys(self, connection, table_name, schema=None, **kw):        return super(ParadoxDialect, self).get_primary_keys(connection, table_name, schema, **kw)    def get_foreign_keys(self, connection, table_name, schema=None, **kw):        return super(ParadoxDialect, self).get_foreign_keys(connection, table_name, schema, **kw)    def get_table_names(self, connection, schema=None, **kw):        return super(ParadoxDialect, self).get_table_names(connection, schema, **kw)    def get_temp_table_names(self, connection, schema=None, **kw):        return super(ParadoxDialect, self).get_temp_table_names(connection, schema, **kw)    def get_view_names(self, connection, schema=None, **kw):        return super(ParadoxDialect, self).get_view_names(connection, schema, **kw)    def get_temp_view_names(self, connection, schema=None, **kw):        return super(ParadoxDialect, self).get_temp_view_names(connection, schema, **kw)    def get_view_definition(self, connection, view_name, schema=None, **kw):        return super(ParadoxDialect, self).get_view_definition(connection, view_name, schema, **kw)    def get_indexes(self, connection, table_name, schema=None, **kw):        return super(ParadoxDialect, self).get_indexes(connection, table_name, schema, **kw)    def get_unique_constraints(self, connection, table_name, schema=None, **kw):        return super(ParadoxDialect, self).get_unique_constraints(connection, table_name, schema, **kw)    def get_check_constraints(self, connection, table_name, schema=None, **kw):        return super(ParadoxDialect, self).get_check_constraints(connection, table_name, schema, **kw)    def get_table_comment(self, connection, table_name, schema=None, **kw):        return super(ParadoxDialect, self).get_table_comment(connection, table_name, schema, **kw)    def has_table(self, connection, table_name, schema=None, **kw):        return super(ParadoxDialect, self).has_table(connection, table_name, schema)    def has_sequence(self, connection, sequence_name, schema=None, **kw):        return super(ParadoxDialect, self).has_sequence(connection, sequence_name, schema)    def _get_server_version_info(self, connection, **kwargs):        return super(ParadoxDialect, self)._get_server_version_info(connection)    def _get_default_schema_name(self, connection):        return super(ParadoxDialect, self)._get_default_schema_name(connection)    def do_begin_twophase(self, connection, xid):        return super(ParadoxDialect, self).do_begin_twophase(connection, xid)    def do_prepare_twophase(self, connection, xid):        return super(ParadoxDialect, self).do_prepare_twophase(connection, xid)    def do_rollback_twophase(self, connection, xid, is_prepared=True, recover=False):        return super(ParadoxDialect, self).do_rollback_twophase(connection, xid, is_prepared, recover)    def do_commit_twophase(self, connection, xid, is_prepared=True, recover=False):        return super(ParadoxDialect, self).do_commit_twophase(connection, xid, is_prepared, recover)    def do_recover_twophase(self, connection):        return super(ParadoxDialect, self).do_recover_twophase(connection)    def set_isolation_level(self, dbapi_conn, level):        return super(ParadoxDialect, self).set_isolation_level(dbapi_conn, level)    def get_isolation_level(self, dbapi_conn):        return super(ParadoxDialect, self).get_isolation_level(dbapi_conn)